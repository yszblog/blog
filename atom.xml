<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>福尔摩斯姚</title>
  
  <subtitle>专注于搞事情的一个老清新~</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yszblog.vip/"/>
  <updated>2018-05-09T02:31:26.149Z</updated>
  <id>https://yszblog.vip/</id>
  
  <author>
    <name>976776565@qq.com</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前后端常见的几种鉴权方式</title>
    <link href="https://yszblog.vip/2018/05/09/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%B8%B8%E8%A7%81%E7%9A%84%E5%87%A0%E7%A7%8D%E9%89%B4%E6%9D%83%E6%96%B9%E5%BC%8F/"/>
    <id>https://yszblog.vip/2018/05/09/前后端常见的几种鉴权方式/</id>
    <published>2018-05-09T02:10:05.000Z</published>
    <updated>2018-05-09T02:31:26.149Z</updated>
    
    <content type="html"><![CDATA[<p>##前后端常见的几种鉴权方式<br><a href="https://juejin.im/entry/5aeffcf66fb9a07acd4da653?utm_source=gold_browser_extension" target="_blank" rel="noopener">本文作者</a></p><p></p><p>目前我们常用的鉴权有四种：</p><p></p><p><ol></ol></p><li>HTTP Basic Authentication</li><br><li>session-cookie</li><br><li>Token 验证</li><br><li>OAuth(开放授权)</li><br><br><p>一.HTTP Basic Authentication</p><br><p>&emsp;&emsp; 这种授权方式是浏览器遵守http协议实现的基本授权方式,HTTP协议进行通信的过程中，HTTP协议定义了基本认证认证允许HTTP服务器对客户端进行用户身份证的方法。</p><br><p><strong>认证过程：</strong></p><br><p>&emsp;&emsp;1． 客户端向服务器请求数据，请求的内容可能是一个网页或者是一个ajax异步请求，此时，假设客户端尚未被验证，则客户端提供如下请求至服务器:</p><br><p>&emsp;&emsp;Get /index.html HTTP/1.0 &emsp;&emsp;Host:www.google.com</p><br><p>&emsp;&emsp;2． 服务器向客户端发送验证请求代码401,（WWW-Authenticate: Basic realm=”google.com”这句话是关键，如果没有客户端不会弹出用户名和密码输入界面）服务器返回的数据大抵如下：</p><br><p>&emsp;&emsp;HTTP/1.0 401 Unauthorised <br> &emsp;&emsp;Server: SokEvo/1.0 <br> &emsp;&emsp;WWW-Authenticate: Basic realm=”google.com” <br> &emsp;&emsp;Content-Type: text/html <br> &emsp;&emsp;Content-Length: xxx</p><br><p>&emsp;&emsp;3． 当符合http1.0或1.1规范的客户端（如IE，FIREFOX）收到401返回值时，将自动弹出一个登录窗口，要求用户输入用户名和密码。</p><br><p>&emsp;&emsp;4． 用户输入用户名和密码后，将用户名及密码以BASE64加密方式加密，并将密文放入前一条请求信息中，则客户端发送的第一条请求信息则变成如下内容：</p><br><p>&emsp;&emsp;Get /index.html HTTP/1.0 <br> &emsp;&emsp;Host:www.google.com <br> &emsp;&emsp;Authorization: Basic d2FuZzp3YW5n</p><br><p>注：d2FuZzp3YW5n表示加密后的用户名及密码（用户名：密码 然后通过base64加密，加密过程是浏览器默认的行为，不需要我们人为加密，我们只需要输入用户名密码即可）</p><br><p>&emsp;&emsp;5． 服务器收到上述请求信息后，将Authorization字段后的用户信息取出、解密，将解密后的用户名及密码与用户数据库进行比较验证，如用户名及密码正确，服务器则根据请求，将所请求资源发送给客户端</p><br><p>效果：客户端未未认证的时候，会弹出用户名密码输入框，这个时候请求时属于pending状态，这个时候其实服务当用户输入用户名密码的时候客户端会再次发送带Authentication头的请求。</p><br><p><img width="100%" src="https://user-gold-cdn.xitu.io/2018/5/7/16339744aec241e0?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"></p><br><p>认证成功：</p><br><p><img width="100%" src="https://user-gold-cdn.xitu.io/2018/5/7/16339744aebeb835?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"></p><br><p>server.js</p><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">let express = require(&quot;express&quot;);</span><br><span class="line">let app = express();</span><br><span class="line"></span><br><span class="line">app.use(express.static(__dirname+&apos;/public&apos;));</span><br><span class="line"></span><br><span class="line">app.get(&quot;/Authentication_base&quot;,function(req,res)&#123;</span><br><span class="line">  console.log(&apos;req.headers.authorization:&apos;,req.headers)</span><br><span class="line">  if(!req.headers.authorization)&#123;</span><br><span class="line">    res.set(&#123;</span><br><span class="line">     &apos;WWW-Authenticate&apos;:&apos;Basic realm=&quot;wang&quot;&apos;</span><br><span class="line">    &#125;);</span><br><span class="line">    res.status(401).end();</span><br><span class="line">  &#125;else&#123;</span><br><span class="line">    let base64 = req.headers.authorization.split(&quot; &quot;)[1];</span><br><span class="line">    let userPass = new Buffer(base64, &apos;base64&apos;).toString().split(&quot;:&quot;);</span><br><span class="line">    let user = userPass[0];</span><br><span class="line">    let pass = userPass[1];</span><br><span class="line">    if(user==&quot;wang&quot;&amp;amp;&amp;amp;pass=&quot;wang&quot;)&#123;</span><br><span class="line">      res.end(&quot;OK&quot;);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">      res.status(401).end();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(9090)</span><br></pre></td></tr></table></figure><br><br><p>index.html:</p><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;HTTP Basic Authentication&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;div&gt;&lt;/div&gt;</span><br><span class="line">    &lt;script src=&quot;js/jquery-3.2.1.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      $(function()&#123;</span><br><span class="line">        send(&apos;./Authentication_base&apos;);</span><br><span class="line">      &#125;)</span><br><span class="line">      var send = function(url)&#123;</span><br><span class="line">          $.ajax(&#123;  </span><br><span class="line">          url : url,  </span><br><span class="line">          method : &apos;GET&apos;,  </span><br><span class="line">      &#125;);</span><br><span class="line">     &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><br><br><p>&emsp;&emsp;当然有登陆就有注销，我们会发现当我们认证成功后每次请求请求头都会带上Authentication及里面的内容，那么如何做到让这次登陆失效的？</p><br><p>&emsp;&emsp;网上查了半天，目前最有效的方式就是在注销操作的时候，专门在服务器设置一个专门的注销账号，当接收到的Authentication信息为注销用户名密码的时候纠就带便注销成功了，而客户端在注销操作的时候，手动的的去修改请求头重的Authentication，将他设置未服务器默认的注销账号和密码。</p><br><p>&emsp;&emsp;通过上面的简单讲解 其实我们已经可以返现这种验证方式的缺陷加密方式简单，仅仅是base64加密，这种加密方式是可逆的。同时在每个请求的头上都会附带上用户名和密码信息，这样在外网是很容易被嗅探器探测到的。</p><br><p>总结:</p><br><p>&emsp;&emsp;正式因为这样，这种加密方式一般多被用在内部安全性要求不高的的系统上，只是相对的多，总的来说现在使用这种鉴权比较少了。如果项目需要部署在公网上，这种方式不推荐，当然你也可以和SSL来加密传输，这样会好一点，这个如果我后面有时间来研究一下。</p><br><p><strong>二.session-cookie</strong></p><br><p>第二种这个方式是利用服务器端的session（会话）和浏览器端的cookie来实现前后端的认证，由于http请求时是无状态的，服务器正常情况下是不知道当前请求之前有没有来过，这个时候我们如果要记录状态，就需要在服务器端创建一个会话(seesion),将同一个客户端的请求都维护在各自得会会话中，每当请求到达服务器端的时候，先去查一下该客户端有没有在服务器端创建seesion，如果有则已经认证成功了，否则就没有认证。 <br> session-cookie认证主要分四步： <br> &emsp;&emsp;1，服务器在接受客户端首次访问时在服务器端创建seesion，然后保存seesion(我们可以将seesion保存在内存中，也可以保存在redis中，推荐使用后者)，然后给这个session生成一个唯一的标识字符串,然后在响应头中种下这个唯一标识字符串。<br><br> &emsp;&emsp; 2.签名。这一步只是对sid进行加密处理，服务端会根据这个secret密钥进行解密。（非必需步骤） <br> &emsp;&emsp;3.浏览器中收到请求响应的时候会解析响应头，然后将sid保存在本地cookie中，浏览器在下次http请求de 请求头中会带上该域名下的cookie信息， <br> &emsp;&emsp; 4.服务器在接受客户端请求时会去解析请求头cookie中的sid，然后根据这个sid去找服务器端保存的该客户端的session，然后判断该请求是否合法。<br></p><br><p><img width="100%" src="https://user-gold-cdn.xitu.io/2018/5/7/16339744aec16ef2?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"></p><br><p>server.js(nodejs+express+seesion+redis)</p><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var RedisStore = require(&apos;connect-redis&apos;)(express.session);</span><br><span class="line">var app = express();</span><br><span class="line">var secret  = &quot;wang839305939&quot;</span><br><span class="line">// 设置 Cookie</span><br><span class="line">app.use(express.cookieParser(secret));</span><br><span class="line"></span><br><span class="line">// 设置 Session</span><br><span class="line">app.use(express.session(&#123;</span><br><span class="line">  store: new RedisStore(&#123;</span><br><span class="line">    host: &quot;127.0.0.1&quot;,</span><br><span class="line">    port: 6379,</span><br><span class="line">    db: &quot;session_db&quot;</span><br><span class="line">  &#125;),</span><br><span class="line">  secret: secret</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line">app.get(&quot;/&quot;, function(req, res) &#123;</span><br><span class="line">  var session = req.session;</span><br><span class="line">  session.time= session.time|| 0;</span><br><span class="line">  var n = session.time++;</span><br><span class="line">  res.send(&apos;hello, session id:&apos; + session.id + &apos; count:&apos; + n);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(9080);</span><br></pre></td></tr></table></figure><br><br><p><strong>三.Token 验证</strong></p><br><p>使用基于 Token 的身份验证方法，大概的流程是这样的：</p><br><p>&emsp;&emsp;1. 客户端使用用户名跟密码请求登录 <br> &emsp;&emsp;2. 服务端收到请求，去验证用户名与密码 <br> &emsp;&emsp;3. 验证成功后，服务端会签发一个 Token，再把这个 Token 发送给客户端 <br> &emsp;&emsp;4. 客户端收到 Token 以后可以把它存储起来，比如放在 Cookie 里或者 Local Storage 里 <br> &emsp;&emsp;5. 客户端每次向服务端请求资源的时候需要带着服务端签发的<br>Token <br> &emsp;&emsp;6. 服务端收到请求，然后去验证客户端请求里面带着的 Token，如果验证成功，就向客户端返回请求的数据</p><br><p>&emsp;&emsp;总的来说就是客户端在首次登陆以后，服务端再次接收http请求的时候，就只认token了，请求只要每次把token带上就行了，服务器端会拦截所有的请求，然后校验token的合法性，合法就放行，不合法就返回401（鉴权失败）。</p><br><p>&emsp;&emsp;乍的一看好像和前面的seesion-cookie有点像，seesion-cookie是通过seesionid来作为浏览器和服务端的链接桥梁，而token验证方式貌似是token来起到seesionid的角色。其实这两者差别是很大的。 <br> &emsp;&emsp;1. sessionid 他只是一个唯一标识的字符串，服务端是根据这个字符串，来查询在服务器端保持的seesion，这里面才保存着用户的登陆状态。但是token本身就是一种登陆成功凭证，他是在登陆成功后根据某种规则生成的一种信息凭证，他里面本身就保存着用户的登陆状态。服务器端只需要根据定义的规则校验这个token是否合法就行。<br><br> &emsp;&emsp;2. session-cookie是需要cookie配合的，居然要cookie，那么在http代理客户端的选择上就是只有浏览器了，因为只有浏览器才会去解析请求响应头里面的cookie,然后每次请求再默认带上该域名下的cookie。但是我们知道http代理客户端不只有浏览器，还有原生APP等等，这个时候cookie是不起作用的，或者浏览器端是可以禁止cookie的(虽然可以，但是这基本上是属于吃饱没事干的人干的事)…，但是token 就不一样，他是登陆请求在登陆成功后再请求响应体中返回的信息，客户端在收到响应的时候，可以把他存在本地的cookie,storage，或者内存中，然后再下一次请求的请求头重带上这个token就行了。简单点来说cookie-session机制他限制了客户端的类型，而token验证机制丰富了客户端类型。<br><br> &emsp;&emsp;3. 时效性。session-cookie的sessionid实在登陆的时候生成的而且在登出事时一直不变的，在一定程度上安全就会低，而token是可以在一段时间内动态改变的。 <br> &emsp;&emsp; 4. 可扩展性。token验证本身是比较灵活的，一是token的解决方案有许多，常用的是JWT,二来我们可以基于token验证机制，专门做一个鉴权服务，用它向多个服务的请求进行统一鉴权。</p><br><p>下面就拿最常用的JWT（JSON WEB TOKEN）来说：</p><br><p>&emsp;&emsp; JWT是Auth0提出的通过对JSON进行加密签名来实现授权验证的方案，就是登陆成功后将相关信息组成json对象，然后对这个对象进行某中方式的加密，返回给客户端，客户端在下次请求时带上这个token，服务端再收到请求时校验token合法性，其实也就是在校验请求的合法性。 JWT对象通常由三部分构成：</p><br><ol><br><li>Headers： 包括类别（typ）、加密算法（alg）</li><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;alg&quot;: &quot;HS256&quot;,</span><br><span class="line">&quot;typ&quot;: &quot;JWT&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br><li>Claims ：包括需要传递的用户信息 </li><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;sub&quot;: &quot;1234567890&quot;,</span><br><span class="line">  &quot;name&quot;: &quot;John Doe&quot;,</span><br><span class="line">  &quot;admin&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br><li>Signature： 根据alg算法与私有秘钥进行加密得到的签名字串， 这一段是最重要的敏感信息，只能在服务端解密；</li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HMACSHA256(  </span><br><span class="line">base64UrlEncode(Headers) + &quot;.&quot; + base64UrlEncode(Claims),</span><br><span class="line">SECREATE_KEY</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p></p></ol><p></p><p></p><p>编码之后的JWT看起来是这样的一串字符：</p><p></p><p></p><p>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ </p><p></p><p></p><p>nodejs+express+<a href="https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fhokaccha%2Fnode-jwt-simple" target="_blank" rel="nofollow noopener noreferrer">jwt-simple</a> <br> auth.js</p><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">let jwt = require(&apos;jwt-simple&apos;);</span><br><span class="line">let secret = &quot;wangyy&quot;;</span><br><span class="line">let time = 10;</span><br><span class="line">module.exports = &#123; </span><br><span class="line">/*</span><br><span class="line">*检验token合法性</span><br><span class="line">*/ </span><br><span class="line">  validate:function(req,res,next)&#123; </span><br><span class="line">  let token = req.body.token||req.headers[&quot;xssToken&quot;];</span><br><span class="line">    if(token)&#123; </span><br><span class="line">      let decodeToken = null;</span><br><span class="line">      try &#123; //防止假冒token解析報錯 </span><br><span class="line">         decodeToken = jwt.decode(token,secret,&apos;HS256&apos;); </span><br><span class="line">      &#125; catch (err) &#123; </span><br><span class="line">        res.status(401).send(&quot;非法访问&quot;); return; </span><br><span class="line">      &#125; </span><br><span class="line">    let exp = decodeToken.exp; if(!exp)&#123;</span><br><span class="line">    res.status(401).send(&quot;非法访问&quot;);</span><br><span class="line">   &#125;</span><br><span class="line">   let now = new Date().getTime();</span><br><span class="line">    if(exp&gt;(now+time*60*1000))&#123;</span><br><span class="line">      res.send(&#123;code:&apos;002&apos;,&quot;errorMsg&quot;:&quot;授权超时&quot;&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    next();</span><br><span class="line">  &#125;else&#123; </span><br><span class="line">      res.status(401).send(&quot;非法访问&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">/* 生成token*/ </span><br><span class="line">makeToken()&#123; </span><br><span class="line">  let Token = null; </span><br><span class="line">  let payload = &#123; </span><br><span class="line">  time:new Date().getTime(), </span><br><span class="line">  exp:this.makeExp(time) </span><br><span class="line">  &#125; </span><br><span class="line">  Token = jwt.encode(payload,secret,HS256) return Token; </span><br><span class="line">&#125;, </span><br><span class="line">  /*生成token过期时间*/ </span><br><span class="line">  makeExp:function(time)&#123;</span><br><span class="line">  let stam = time601000; </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p></p><p>server.js</p><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">let express = require(&quot;express&quot;); </span><br><span class="line">let app = express(); </span><br><span class="line">let bodyParser = require(&apos;body-parser&apos;); </span><br><span class="line">let auth = require(&apos;./lib/auth.js&apos;); </span><br><span class="line">let chalk = require(&apos;chalk&apos;); app.use(bodyParser.json()); app.post(&apos;/login&apos;,function(req,res,next)&#123; </span><br><span class="line">  let Token = auth.makeToken(); </span><br><span class="line">  res.json(&#123;result:&quot;success&quot;,token:Token&#125;,200)</span><br><span class="line">&#125;);</span><br><span class="line">app.use(&apos;*&apos;,[auth.validate],function(req,res,next)&#123; </span><br><span class="line">  res.send(&apos;success&apos;); </span><br><span class="line">&#125;); </span><br><span class="line">app.listen(&apos;9999&apos;)</span><br></pre></td></tr></table></figure><p></p><p></p><p>&emsp;&emsp;上面只是一个简单的token生成和校验，如果有需要可以根据实际需要进行逻辑处理</p><p></p><p></p><p><strong>四.OAuth(开放授权)</strong></p><p></p><p></p><p>&emsp;&emsp;OAuth（开放授权）是一个开放标准，允许用户授权第三方网站访问他们存储在另外的服务提供者上的信息，而不需要将用户名和密码提供给第三方网站或分享他们数据的所有内容，为了保护用户数据的安全和隐私，第三方网站访问用户数据前都需要显式的向用户征求授权。我们常见的提供OAuth认证服务的厂商有支付宝，QQ,微信。 <br> &emsp;&emsp;OAuth协议又有1.0和2.0两个版本。相比较1.0版，2.0版整个授权验证流程更简单更安全，也是目前最主要的用户身份验证和授权方式。<br><br> 下面是一张auth2.0的流程图： <br> <img width="100%" src="https://user-gold-cdn.xitu.io/2018/5/7/16339744aedf4acb?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"></p><p></p><p></p><p>从图中我们可以看出，auth2.0流程分为六布（我们就以csdn登陆为例）：</p><p></p><p></p><p>第一步. 向用户请求授权，现在很多的网站在登陆的时候都有第三方登陆的入口，当我们点击等第三方入口时，第三方授权服务会引导我们进入第三方登陆授权页面。</p><p></p><p></p><p><img width="100%" src="https://user-gold-cdn.xitu.io/2018/5/7/16339744e19b58db?imageView2/0/w/1280/h/960/format/webp/ignore-error/1"></p><p></p><p></p><p>通过第三方请求授权页面的浏览器地址栏地址可以看出，</p><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://graph.qq.com/oauth2.0/show?which=Login&amp;amp;display=pc&amp;amp;response_type=code&amp;amp;client_id=100270989&amp;amp;redirect_uri=https%3A%2F%2Fpassport.csdn.net%2Faccount%2Flogin%3Foauth_provider%3DQQProvider&amp;amp;state=test</span><br></pre></td></tr></table></figure><p></p><p></p><p>这里的地址里面的%是浏览器强制编码后的显示我们可以使用decodeURIComponent进行解码，解码后是这样：</p><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://graph.qq.com/oauth2.0/show?which=Login&amp;amp;display=pc&amp;amp;response_type=code&amp;amp;client_id=100270989&amp;amp;redirect_uri=https://passport.csdn.net/account/login?oauth_provider=QQProvider&amp;amp;state=test</span><br></pre></td></tr></table></figure><p></p><p></p><p>这个url地址我们可以看见Auth2.0常见的几个参数： <br> &emsp;&emsp; &emsp;&emsp; response_type，返回类型 <br> &emsp;&emsp; &emsp;&emsp; client_id，第三方应用id,由授权服务器（qq）在第三方应用提交时颁发给第三方应用。 <br> &emsp;&emsp; &emsp;&emsp; redirect_uri，登陆成功重定向页面 <br> &emsp;&emsp; &emsp;&emsp; oauth_provider，第三方授权提供方<br><br> &emsp;&emsp; &emsp;&emsp; state，由第三方应用给出的随机码 <br> 第二步. 返回用户凭证（code），并返回一个凭证（code），当用户点击授权并登陆后，授权服务器将生成一个用户凭证（code）。这个用户凭证会附加在重定向的地址redirect_uri的后面</p><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://passport.csdn.net/account/login?code=9e3efa6cea739f9aaab2&amp;amp;state=XXX</span><br></pre></td></tr></table></figure><p></p><p></p><p>第3步. 请求授权服务器授权:</p><p></p><p></p><p>&emsp;&emsp;经过第二部获取code后后面的工作就可以交给后台去处理的，和用户的交互就结束了。接下来我的需要获取Access Token，我们需要用他来向授权服务器获取用户信息等资源。 &emsp;&emsp;第三方应用后台通过第二步的凭证（code）向授权服务器请求Access Token，这时候需要以下几个信息：</p><p></p><p><ul></ul></p><p><li>client_id 标识第三方应用的id，由授权服务器（Github）在第三方应用提交时颁发给第三方应用</li></p><p><li>client_secret 第三方应用和授权服务器之间的安全凭证，由授权服务器（Github）在第三方应用提交时颁发给第三方应用</li></p><p><li>code 第一步中返回的用户凭证redirect_uri 第一步生成用户凭证后跳转到第二步时的地址</li></p><p><li>state 由第三方应用给出的随机码</li><br></p><p></p><p>第四步. 授权服务器同意授权后，返回一个资源访问的凭证（Access Token）。</p><p></p><p></p><p>第五步. 第三方应用通过第四步的凭证（Access Token）向资源服务器请求相关资源。</p><p></p><p></p><p>第六步. 资源服务器验证凭证（Access Token）通过后，将第三方应用请求的资源返回。</p><p></p><p></p><p>从用户角度来说，第三方授权可以让我们快速的登陆应用，无需进行繁琐的注册,同时不用记住各种账号密码。只需要记住自己常用的几个账号就ok了。 从产品经理的角度来所，这种授权方式提高用户的体验满意度。另一方面可以获取更多的用户。</p><p></p><p></p><p>总结：</p><p></p><p></p><p>&emsp;&emsp;授权方式多种多样，主要还是要取决于我们对于产品的定位。如果我们的产品只是在企业内部使用，token和session就可以满足我们的需求，如果是面向互联网的大众用户，那么第三方授权在用户体验度上会有一个很大的提升。</p><br><strong>本文属于收藏，原著请点击文章头部链接地址。</strong><p></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;##前后端常见的几种鉴权方式&lt;br&gt;&lt;a href=&quot;https://juejin.im/entry/5aeffcf66fb9a07acd4da653?utm_source=gold_browser_extension&quot; target=&quot;_blank&quot; rel=&quot;noope
      
    
    </summary>
    
      <category term="Javascript" scheme="https://yszblog.vip/categories/Javascript/"/>
    
    
      <category term="Javascript" scheme="https://yszblog.vip/tags/Javascript/"/>
    
      <category term="HTTP" scheme="https://yszblog.vip/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>生活记录</title>
    <link href="https://yszblog.vip/2018/02/18/Paris%20of%20the%20Orient/"/>
    <id>https://yszblog.vip/2018/02/18/Paris of the Orient/</id>
    <published>2018-02-18T10:25:11.000Z</published>
    <updated>2018-05-09T02:31:26.149Z</updated>
    
    <content type="html"><![CDATA[<p></p><h3>上海 - Paris of the Orient</h3><p></p><div class="box"><br>大年初三、远走他乡、来到<span style="color: #CC0033;"> 2615.9 </span>公里外的上海。<br><br><br><span>New city new life. Expect good things to happen . Fighting ! ! !</span><br><br><br><img style="width: 80%;pointer-events: none;" src="https://images.unsplash.com/photo-1455459182396-ae46100617cb"><br></div><hr><p><script type="text/javascript" src="https://api.imjad.cn/hitokoto/?encode=js&charset=utf-8"></script><br><strong id="hitokoto"><script>hitokoto()</script></strong></p><hr>]]></content>
    
    <summary type="html">
    
      2018年2月18号、大年初三
    
    </summary>
    
      <category term="个人生活" scheme="https://yszblog.vip/categories/%E4%B8%AA%E4%BA%BA%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="个人" scheme="https://yszblog.vip/tags/%E4%B8%AA%E4%BA%BA/"/>
    
  </entry>
  
  <entry>
    <title>测试评论</title>
    <link href="https://yszblog.vip/2017/12/30/%E6%B5%8B%E8%AF%95%E6%96%87%E4%BB%B6/"/>
    <id>https://yszblog.vip/2017/12/30/测试文件/</id>
    <published>2017-12-30T09:11:11.000Z</published>
    <updated>2018-05-09T02:31:26.149Z</updated>
    
    <content type="html"><![CDATA[<h1 id="测试评论系统"><a href="#测试评论系统" class="headerlink" title="测试评论系统"></a>测试评论系统</h1><hr><p><script type="text/javascript" src="https://api.imjad.cn/hitokoto/?encode=js&charset=utf-8"></script><br><strong id="hitokoto"><script>hitokoto()</script></strong></p><hr>]]></content>
    
    <summary type="html">
    
      详情请点击全文
    
    </summary>
    
      <category term="测试" scheme="https://yszblog.vip/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="测试" scheme="https://yszblog.vip/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>快速，零配置的 Web 应用程序打包器</title>
    <link href="https://yszblog.vip/2017/12/28/Parcel-%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/"/>
    <id>https://yszblog.vip/2017/12/28/Parcel-打包工具/</id>
    <published>2017-12-27T18:40:44.000Z</published>
    <updated>2018-05-09T02:31:26.149Z</updated>
    
    <content type="html"><![CDATA[<h2 id="🚀-入门"><a href="#🚀-入门" class="headerlink" title="🚀-入门"></a>🚀-入门</h2><p><strong>Parcel</strong> 是一个<strong>Web</strong>应用程序 打包器(<strong>bundler</strong>) ，与以往的开发人员使用的打包器有所不同。它利用多核处理提供极快的性能，并且你不需要进行任何配置。</p><p>首先使用 <strong>Yarn</strong> 或 <strong>npm</strong> 安装 <strong>Parcel</strong> ：</p><p><strong>Yarn:</strong></p><p><code>yarn global add parcel-bundler</code></p><p><strong>npm:</strong></p><p><code>npm install -g parcel-bundler</code></p><p>使用以下命令在你的项目目录中创建一个 <strong>package.json</strong> 文件：</p><p><code>yarn init -y</code></p><p><strong>or</strong></p><p><code>npm init -y</code></p><p><strong>Parcel</strong> 可以将任何类型的文件作为 入口点(<strong>entry point</strong>) ，但是 <strong>HTML</strong> 或 <strong>JavaScript</strong> 文件是一个很好的开始。如果你使用相对路径将你的主 <strong>JavaScript</strong> 文件链接到 <strong>HTML</strong> 中，<strong>Parcel</strong> 也会为你处理，并将该引用替换为输出文件的 <strong>URL</strong> 。</p><p>接下来，创建一个 <strong>index.html</strong> 和 <strong>index.js</strong> 文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;script src=&quot;./index.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><code>console.log(&quot;hello world&quot;);</code></p><p><strong>Parcel</strong> 内置了一个开发服务器，这会在你更改文件时自动重建你的应用程序，并支持 <a href="http://www.css88.com/doc/parcel/hmr.html" target="_blank" rel="noopener">模块热替换</a> ，以便你快速开发。你只需指定 入口文件 即可：</p><p><code>parcel index.html</code></p><p>现在在你浏览器中打开 <a href="http://localhost:1234/" target="_blank" rel="noopener">http://localhost:1234/</a> 。 您也可以使用 <code>-p &lt;port number&gt;</code> 选项覆盖默认端口。</p><p>如果您没有自己的服务器，或者你的应用完全是客户端渲染的，那么请使用开发服务器。如果你有自己的服务器，您可以在<strong>watch</strong> 模式下运行 <strong>Parcel</strong> 。这样在文件更改时，<strong>Parcel</strong> 仍然会自动重建文件，并支持模块热替换，但不启动<strong>Web</strong> 服务器。</p><p><code>parcel watch index.html</code></p><p>当您准备为生产构建时，<code>build</code> 模式会关闭监视，并且只会构建一次。 参见 <strong><a href="http://www.css88.com/doc/parcel/production.html" target="_blank" rel="noopener">Production</a></strong> 部分了解更多细节。</p><hr><p><script type="text/javascript" src="https://api.imjad.cn/hitokoto/?encode=js&charset=utf-8"></script><br><strong id="hitokoto"><script>hitokoto()</script></strong></p><hr>]]></content>
    
    <summary type="html">
    
      快速，零配置的 Web 应用程序打包器-Parcel
    
    </summary>
    
    
      <category term="打包工具" scheme="https://yszblog.vip/tags/%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Fete Of The World</title>
    <link href="https://yszblog.vip/2016/05/21/Fete-Of-The-World/"/>
    <id>https://yszblog.vip/2016/05/21/Fete-Of-The-World/</id>
    <published>2016-05-21T05:14:20.000Z</published>
    <updated>2018-05-09T02:31:26.149Z</updated>
    
    <content type="html"><![CDATA[<p></p><p data-height="470" data-theme-id="0" data-slug-hash="OgvyNa" data-default-tab="js,result" data-user="Raincal" data-embed-version="2" data-pen-title="Fete-Of-The-World" class="codepen">See the Pen <a href="https://codepen.io/Raincal/pen/OgvyNa/" target="_blank" rel="noopener">Fete-Of-The-World</a> by Raincal (<a href="https://codepen.io/Raincal" target="_blank" rel="noopener">@Raincal</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><p></p><script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script><hr><p><script type="text/javascript" src="https://api.imjad.cn/hitokoto/?encode=js&charset=utf-8"></script><br><strong id="hitokoto"><script>hitokoto()</script></strong></p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;/p&gt;&lt;p data-height=&quot;470&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;OgvyNa&quot; data-default-tab=&quot;js,result&quot; data-user=&quot;Raincal&quot; data-embed-version=&quot;2
      
    
    </summary>
    
      <category term="Animation" scheme="https://yszblog.vip/categories/Animation/"/>
    
      <category term="SVG" scheme="https://yszblog.vip/categories/Animation/SVG/"/>
    
    
      <category term="SVG" scheme="https://yszblog.vip/tags/SVG/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://yszblog.vip/2015/05/21/hello-world/"/>
    <id>https://yszblog.vip/2015/05/21/hello-world/</id>
    <published>2015-05-21T05:14:20.000Z</published>
    <updated>2018-05-09T02:31:26.149Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><hr><p><script type="text/javascript" src="https://api.imjad.cn/hitokoto/?encode=js&charset=utf-8"></script><br><strong id="hitokoto"><script>hitokoto()</script></strong></p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
